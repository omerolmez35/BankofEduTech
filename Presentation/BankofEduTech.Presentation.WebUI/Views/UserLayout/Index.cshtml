@using BankofEduTech.Core.Application.StaticServices.BankofEduTech.Core.Application.StaticServices
@inject ClaimService ClaimService
@* @using BankofEduTech.Core.Application.Features.Queries.Notification.GetActiveLastNotification
@model List<GetActiveLastNotificationQueryResponse> *@

@{
    
    Layout = null;
    // var notifications = ViewData["Notifications"] as List<BankofEduTech.Core.Application.Features.Queries.Notification.GetActiveLastNotification.GetActiveLastNotificationQueryResponse>;

}

<!DOCTYPE html>

<html lang="en">

@await Component.InvokeAsync("_CustomerLayoutHeaderPartial")

<body>
    <div id="app">

        @if (ClaimService.Role == "Customer")
        {
            @await Component.InvokeAsync("_CustomerLayoutSidebarPartial")
        }
        @if (ClaimService.Role == "Admin")
        {
            @await Component.InvokeAsync("_AdminLayoutSidebarPartial")
        }

        <div id="main" class='layout-navbar'>
           @await Component.InvokeAsync("_CustomerLayoutNavbarPartial")
        
            <div id="main-content">

                <div class="page-heading">

                    <section class="section">
                        @RenderBody()
                    </section>
                </div>

            </div>
        </div>
    
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const notificationItems = document.querySelectorAll('.notification-item .notification-message');
            const maxLength = 30; // Mesaj uzunluğunu belirliyoruz

            // Mesajları kesip "..." eklemek için
            notificationItems.forEach(item => {
                if (item.textContent.length > maxLength) {
                    item.textContent = item.textContent.substring(0, maxLength) + '...';
                }
            });

            // Bildirim üzerine tıklama olayı
            document.querySelectorAll('.notification-item > a').forEach(link => {
                link.addEventListener('click', function (event) {
                    event.preventDefault();
                    // Burada bildirim tıklandığında yapılacak işlemleri belirleyebilirsin
                    alert('Bildirim tıklandı: ' + this.querySelector('.notification-message').textContent);
                });
            });

            // Tek tek bildirimleri okundu olarak işaretlemek için
            document.querySelectorAll('.mark-as-read').forEach(button => {
                button.addEventListener('click', function (event) {
                    event.preventDefault();
                    const notification = this.closest('.notification-item');
                    notification.classList.remove('unread');
                    this.textContent = "Okundu";
                    this.classList.add('text-success');
                    this.dataset.read = 'true';

                    updateNotificationCount(); // Bildirim sayısını güncelle
                });
            });

            // Tüm bildirimleri okundu olarak işaretleme
            document.getElementById('mark-all-read').addEventListener('click', function () {
                document.querySelectorAll('.mark-as-read').forEach(button => {
                    const notification = button.closest('.notification-item');
                    notification.classList.remove('unread');
                    button.textContent = "Okundu";
                    button.classList.add('text-success');
                    button.dataset.read = 'true';
                });

                updateNotificationCount(); // Bildirim sayısını güncelle
            });

            // Bildirim sayısını güncelleyen fonksiyon
            function updateNotificationCount() {
                const unreadCount = document.querySelectorAll('.mark-as-read[data-read="false"]').length;
                const notificationCountBadge = document.querySelector('.notification-count');
                notificationCountBadge.textContent = unreadCount;

                // Eğer okunmamış bildirim yoksa bildirim sayacını gizle
                if (unreadCount === 0) {
                    notificationCountBadge.style.display = 'none';
                } else {
                    notificationCountBadge.style.display = 'inline-block';
                }
            }

            updateNotificationCount(); // Sayfa yüklendiğinde sayacı güncelle
        });



        // function SignalRTaskNotificationConnection() {
        //     try {
        //         var connection = new signalR.HubConnectionBuilder()
        //             .withUrl("/notificationhub")
        //             /* .configureLogging(signalR.LogLevel.Information)*/
        //             .build();

        //         connection.start().then(function () {
        //             console.log("Task Notification SignalR bağlantısı başarıyla kuruldu.");

        //             //var userId = $("#UserId").val();
        //             //connection.invoke("Connect", userId).catch(function (err) {
        //             //    console.error("SignalR bağlantı hatası:", err.toString());
        //             //});
        //             var userId = $("#UserId").val();
        //             if (userId) {
        //                 connection.invoke("AWakenings", userId)
        //                     .catch(function (err) {
        //                         console.error("SignalR 'AWakenings' çağrı hatası:", err.toString());
        //                     });
        //             } else {
        //                 console.warn("UserId bulunamadı.");
        //             }
        //             connection.on("ReceiveAWakenings", function (response) {

        //                 var result = JSON.parse(response);
        //                 updateTaskList(result);
        //             });

        //             connection.on("ReceiveNotification", function (message) {

        //                 try {
        //                     var result = JSON.parse(message);
        //                     updateTaskList(result);

        //                 } catch (parseErr) {
        //                     //console.error("ReceiveMessageAsync parsing hatası:", parseErr.toString());
        //                 }
        //             });



        //         }).catch(function (err) {
        //             localStorage.setItem('serviceState', 'offline');
        //             updateServiceState('offline');

        //             if (window.location.pathname === "/device-management/device-operations") {
        //                 getDeviceGrid();
        //             }
        //             console.error("SignalR başlatma hatası:", err.toString());
        //         });
        //     } catch (e) {
        //         console.error("SignalR bağlantı hatası:", e.toString());
        //     }
        // }





  
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.18/signalr.min.js"></script>
    @await Component.InvokeAsync("_CustomerLayoutScriptPartial")


    <script src="~/js/site.js" asp-append-version="true"></script>
    @await Component.InvokeAsync("Notyf")
    @RenderSection("Scripts", required: false)
</body>

</html>